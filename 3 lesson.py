# todo
# (вместо задачи 3) Написать функцию thesaurus_adv(),
# принимающую в качестве аргументов строки в формате «Имя Фамилия» и возвращающую словарь,
# в котором ключи — первые буквы фамилий, а значения — словари,
# реализованные по схеме предыдущего задания и содержащие записи, в которых фамилия начинается
# с соответствующей буквы. Например:
# >>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
# {
#     "А": {
#         "П": ["Петр Алексеев"]
#     },
#     "И": {
#         "И": ["Илья Иванов"]
#     },
#     "С": {
#         "И": ["Иван Сергеев", "Инна Серова"],
#         "А": ["Анна Савельева"]
#     }
# }
# Как поступить, если потребуется сортировка по ключам?
# todo
# Реализовать функцию get_jokes(), возвращающую n шуток, сформированных из трех случайных слов,
# взятых из трёх списков (по одному из каждого):
# nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
# adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
# adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
#         Например:
# >>> get_jokes(2)
# ["лес завтра зеленый", "город вчера веселый"]
# Документировать код функции.
# Сможете ли вы добавить еще один аргумент — флаг, разрешающий или запрещающий повторы слов в шутках
# (когда каждое слово можно использовать только в одной шутке)? Сможете ли вы сделать аргументы именованными?
# ================================= dictionary exercises:    ===============================================
# keys = ['Ten', 'Twenty', 'Thirty']
# values = [10, 20, 30]
# # my_dict = dict(zip(keys, values))
# # print(my_dict)
# my_dict = dict()
# for i in range(len(keys)):
#     my_dict.update({keys[i] : values[i]})
# print(my_dict)
# ==============================================================================================
# sampleDict = {
#     "class": {
#         "student": {
#             "name": "Mike",
#             "marks": {
#                 "physics": 70,
#                 "history": 80
#             }
#         }
#     }
# }
# print(sampleDict['class']['student']['marks']['history'])
# employees = ['Kelly', 'Emma']
# defaults = {"designation": 'Developer', "salary": 8000}
from numpy.core.defchararray import capitalize, title

# def num_translate(key):
#     a = {
#         'zero': 'ноль',
#         'one': 'один',
#         'two': 'два',
#         'three': 'три',
#         'four': 'четыре',
#         'five': 'пять',
#         'six': 'шесть',
#         'seven': 'семь',
#         'eight': 'восемь',
#         'nine': 'девять',
#         'ten': 'десять'
#     }
#     return a.get(key.lower())
#
#
#
# key = input('Input the word in engl: ')
#
#
# if key == key.capitalize():
#     print(num_translate(key).capitalize())
# elif key == key.upper():
#     print(num_translate(key).upper())
# else:
#     print(num_translate(key))

# todo
# Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь,
# в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы.
# Например:
# >>>  thesaurus("Иван", "Мария", "Петр", "Илья")
# {
#     "И": ["Иван", "Илья"],
#     "М": ["Мария"], "П": ["Петр"]
# }
# Подумайте: полезен ли будет вам оператор распаковки? Как поступить, если потребуется сортировка по ключам?
# Можно ли использовать словарь в этом случае?

# names = input('Введите имена сотрудников через запятую (можно с маленькой буквы)')
names = 'tom,Todd,gAs'

def thesaurus(names):
    """функция в качестве аргументов принимает имена
    сотрудников и возвращает словарь,
    где ключи - это первые буквы имен, а значения - списки"""
    list_names = names.split(',')   # return list of the words
    dictnames = 0
    keys = []

    for name in list_names:  # отделяем от каждого слова первую букву срезом и
        keys.append(name[0: 1])                                # ставим в конец keys
        #dictnames = dict.fromkeys(keys[name])  # создаём ключи словаря dictnames из key[name]
    tuple(keys) #из списка делаем кортеж
    dictnames = dict.fromkeys(keys)     #из кортежа - словарь с ключами и значениями None

    return dictnames


print(thesaurus(names))

#
#
#
#
